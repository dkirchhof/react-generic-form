{"version":3,"sources":["webpack:///./src/builder.tsx","webpack:///./src/index.tsx"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,4CAAO;AAC7B;AACA,qBAAqB;AACrB,yBAAyB;AACzB;AACA,0BAA0B,mBAAmB,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS,WAAW,QAAQ,oBAAoB,uBAAuB,GAAG;AACjH,wDAAwD,SAAS;AACjE,sDAAsD,SAAS;AAC/D,8FAA8F,wCAAwC,IAAI,EAAE;AAC5I,iDAAiD;AACjD;AACA,6EAA6E,IAAI,sBAAsB,EAAE,eAAe;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,wBAAwB,IAAI,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yCAAyC,kBAAkB,uBAAuB;AAC3H;;;;;;;;;;;;;AC3Da;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,4CAAO;AAC7B,oBAAoB,mBAAO,CAAC,oDAAW;AACvC,kBAAkB,mBAAO,CAAC,oCAAW;AACrC,iD;AACA,mBAAmB,EAAE;AACrB,kBAAkB,EAAE;AACpB,eAAe,EAAE;AACjB,mBAAmB,EAAE;AACrB,gBAAgB;AAChB,IAAI;AACJ;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,2CAA2C;AAC3C,qBAAqB;AACrB,wBAAwB;AACxB,yBAAyB;AACzB,wBAAwB,qBAAqB;AAC7C;AACA,SAAS,EAAE;AACX,sCAAsC,oBAAoB;AAC1D,sCAAsC,kCAAkC;AACxE","file":"main.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst React = require(\"react\");\r\n// type Input = (props: React.InputHTMLAttributes<HTMLInputElement>) => React.ReactElement;\r\n// type Inputs<T> = { [k in keyof T]: Input };\r\n// type FieldNames<T> = { [k in keyof T]: k };\r\n// interface IFormProps<T> extends React.FormHTMLAttributes<HTMLFormElement> {\r\n//     children: (props: { fields: Fields<T>; }) => React.ReactElement;\r\n// }\r\n// export class FormBuilder<T> {\r\n//     // public fieldNames: FieldNames<T>;\r\n//     public readonly form: (props: IFormProps<T>) => React.ReactElement;\r\n//     // public readonly inputs: Inputs<T>;\r\n//     public readonly submit: (props: React.InputHTMLAttributes<HTMLInputElement>) => React.ReactElement;\r\n//     public readonly reset: (props: React.InputHTMLAttributes<HTMLInputElement>) => React.ReactElement;\r\n//     constructor(fieldOptions: Fields<T>) {\r\n//         this.form = props => <Form {...props} onSubmit={(e) => { e.preventDefault(); console.log(\"submit\"); }}/>;\r\n//         this.submit = props => <input type=\"submit\" {...props}/>;\r\n//         this.reset = props => <input type=\"reset\" {...props}/>;\r\n//         // this.fieldNames = Object.keys(fieldOptions).reduce((fieldNames, fieldName) => ({ ...fieldNames, [fieldName]: fieldName }), { } as FieldNames<T>);\r\n//         // const initialValue: Inputs<any> = { };\r\n//         // const reducer = (inputs: Inputs<T>, key: string) => {\r\n//         //     const newInput: Input = props => <InputWithValidator name={key} validationResult={{}}>{props.children}</InputWithValidator>;\r\n//         //     return {\r\n//         //         ...inputs, \r\n//         //         [key]: newInput\r\n//         //     };\r\n//         // };\r\n//         // this.inputs = Object.keys(fieldOptions).reduce(reducer, initialValue);\r\n//     }\r\n// }\r\n// const formDataToJson = (formData: FormData) => \r\n//     [...formData.entries()].reduce((json, [key, value]) => ({ ...json, [key]: value }), { });\r\nconst validate = (fields, data) => {\r\n    return Object.entries(fields).reduce((result, [key, field]) => {\r\n        const value = data.get(key);\r\n        const validators = field.validators;\r\n        const errors = validators && validators.map(validator => validator(value)).filter(Boolean) || [];\r\n        const newField = {\r\n            ...field,\r\n            value,\r\n            errors\r\n        };\r\n        return {\r\n            ...result,\r\n            [key]: newField,\r\n        };\r\n    }, {});\r\n};\r\nconst submit = (fields, updateFields) => (event) => {\r\n    event.preventDefault();\r\n    const formData = new FormData(event.currentTarget);\r\n    const result = validate(fields, formData);\r\n    updateFields(result);\r\n    console.log(result);\r\n};\r\nexports.FFForm = (props) => {\r\n    const [fields, updateFields] = React.useState(props.fields);\r\n    return (React.createElement(\"form\", { onSubmit: submit(fields, updateFields) }, props.children({ fieldOptions: fields })));\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst React = require(\"react\");\r\nconst react_dom_1 = require(\"react-dom\");\r\nconst builder_1 = require(\"./builder\");\r\n// const formBuilder = new FormBuilder<IPerson>({ \r\n//     firstname: { },\r\n//     lastname: { },\r\n//     email: { },\r\n//     birthdate: { },\r\n//     gender: { }\r\n// });\r\nconst App = () => (React.createElement(React.Fragment, null,\r\n    React.createElement(\"style\", { dangerouslySetInnerHTML: { __html: `\r\n            form {\r\n                width: 200px;\r\n            }\r\n\r\n            input, select, textarea {\r\n                display: block;\r\n                box-sizing: border-box;\r\n                width: 100%;\r\n                margin-bottom: 1em;\r\n            }\r\n        ` } }),\r\n    React.createElement(builder_1.FFForm, { fields: {\r\n            email: {},\r\n            lastname: {},\r\n            birthdate: {},\r\n            firstname: { value: \"hallowelt\" },\r\n            gender: {}\r\n        } }, props => (React.createElement(React.Fragment, null,\r\n        React.createElement(\"input\", { name: \"firstname\" }),\r\n        React.createElement(\"input\", { type: \"submit\", value: \"Submit\" }))))));\r\nreact_dom_1.render(React.createElement(App, null), document.getElementById(\"app\"));\r\n"],"sourceRoot":""}